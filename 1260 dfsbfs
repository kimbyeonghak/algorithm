#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;
int ar[10001];
vector<int> v[10001];

void bfs(int x)
{
	queue<int> q;
	q.push(x);
	ar[x] = 1;
	
	while(!q.empty())
	{
		int temp = q.front();
		q.pop();
		cout << temp << " ";
		for(int i=0;i<v[temp].size();i++)
		{
			int y = v[temp][i];
			if(!ar[y])
			{
				q.push(y);
				ar[y] = 1; 
			}
		}
	}
}

void dfs(int x)
{
	if(ar[x]) return ;
	ar[x] = 1;
	cout << x << " ";
	for(int i=0;i<v[x].size() ;i++)
	{
		int y = v[x][i];
		dfs(y);
	}
}

int main()
{
	int n,m,start,a,b;
	
	cin >> n >> m >> start;
	
	for(int i=0;i<m;i++)
	{
		cin >> a >> b;
		v[a].push_back(b);
		v[b].push_back(a);
	}
	for (int i = 1; i <= n; i++) {
		sort(v[i].begin(), v[i].end());
	}
	dfs(start);
	fill(ar,ar+10001,0);
	cout << endl;
	bfs(start);	
}
