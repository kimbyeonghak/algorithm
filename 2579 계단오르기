#include <iostream>
#include <algorithm>

using namespace std;

int main() {
    int n;
    cin >> n;

    // 계단의 점수를 저장할 배열
    int scores[301];
    // 최대 점수를 저장할 배열 (1-based indexing)
    int dp[301];

    // 계단 점수 입력
    for (int i = 1; i <= n; ++i) {
        cin >> scores[i];
    }

    // DP 배열 초기화
    if (n == 1) {
        cout << scores[1] << endl;
        return 0;
    }
    if (n == 2) {
        cout << scores[1] + scores[2] << endl;
        return 0;
    }

    // 초기 조건
    dp[1] = scores[1];
    dp[2] = scores[1] + scores[2];

    // DP 계산
    for (int i = 3; i <= n; ++i) {
        dp[i] = max(dp[i-2] + scores[i], dp[i-1] + scores[i] - scores[i-1]);
    }

    // 결과 출력
    cout << dp[n] << endl;

    return 0;
}

#include <iostream>
#include <algorithm>
using namespace std;

int stair[301];
int dp[301]; // 메모이제이션을 위한 배열
int n;

int solve(int i) {
    if (i <= 0) return 0; // 0 이하 계단은 점수 없음
    if (dp[i] != -1) return dp[i]; // 이미 계산된 값이면 바로 반환

    // i번째 계단을 밟으면서 최대 점수를 구한다.
    // 두 가지 경우 중 큰 값을 선택
    return dp[i] = max(
        solve(i - 2) + stair[i],                        // i-2 → i
        solve(i - 3) + stair[i - 1] + stair[i]          // i-3 → i-1 → i (연속 세 개 방지)
    );
}

int main() {
    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> stair[i];
    }

    fill(dp, dp + 301, -1); // dp 배열을 -1로 초기화

    // 정답은 마지막 계단을 반드시 밟는 경우 중 최대값
    cout << solve(n) << "\n";

    return 0;
}
